### Function to check and report Scap Baseline Audit Reports
### Author: Jordan A. Caraballo-Vega
CheckBaseScapStatus() {
	HOSTNAME=`/bin/hostname -s`


	### Config file and saving dir path
        CONF_FILE='/etc/scaptest/CheckScapStatus.cfg'
        SAVING_DIR='/var/cache/scaptest'

	### Run the test, capturing the result
	# Warn range is 48 hours, Crit range is 96 hours
	AGE_RESULT=`${PLUGINDIR}/check_file_age -w 172800 \
		-c 345600 ${SAVING_DIR}/BaseScapLastRun.txt`

	# strips out the status of the result - state
	AGE_STATUS=`echo $AGE_RESULT | cut -d " " -f 2 | cut -d: -f 1`

	# Strip out just the data portion of the result - details
	AGE_RESULT=`echo "${AGE_RESULT}" | cut -f2- -d:`

	### if the status is not ok exit
	if [ $AGE_STATUS != "OK" ]
	then
		### State final status result
		if [ ${AGE_STATUS} == "CRITICAL" ]; then
			STATUS=2 # or CRIT
		elif [ ${AGE_STATUS} == "WARNING" ]; then
			STATUS=1 # or WARN
		else
			STATUS=0 # or OK
		fi

		# exit the program and report to nagios just the age problem
		${LOGGER} -t "${LOGGER_TAG}" "CheckBaseScapStatus: ${HOSTNAME} ${STATUS} ${AGE_RESULT}"
		DATA="${DATA}
${HOSTNAME} CheckBaseScapStatus ${STATUS} ${AGE_RESULT}"

	else
		CRIT=0 # var to store crit ocurrences
		WARN=0 # var to store warn ocurrences

		# Gets the full report from the audit
		RESULTLINE=$(head -n 1 ${SAVING_DIR}/BaseScapLastRun.txt)

		### See if there are failures indicated in the logs
		PERCENTAGE=`grep -o -P '(?<=Score ).*(?=%)' \
			${SAVING_DIR}/BaseScapLastRun.txt`

		PERC_STATUS=`grep -oP '(?<=Nagios_Status = ).*' \
			${SAVING_DIR}/BaseScapStateFile.txt`

		CRIT_CCES=`grep -o -P '(?<=CCEs: ).*(?=-fail)' \
			${SAVING_DIR}/BaseScapLastRun.txt`

		WARN_CCES=`grep -o -P '(?<=fail ).*(?=-other)' \
			${SAVING_DIR}/BaseScapLastRun.txt`

		### Parameters to declare the status of the system acquired from the config file
		warn_treshold=`grep -oP '(?<=base_default_warn = ).*' ${CONF_FILE}`
		crit_treshold=`grep -oP '(?<=base_default_crit = ).*' ${CONF_FILE}`

		# Assign default value in case variables are empty
		if [ -z ${warn_treshold} ]; then
			warn_treshold=79
		fi

		if [ -z ${crit_treshold} ]; then
			crit_treshold=69
		fi

		### Comparing with the state file value
		if [ $PERC_STATUS == "CRIT"} ]; then
			((CRIT++)) # or CRIT
			CHANGESTR="Score diminished. "
		elif [ ${PERC_STATUS} == "WARN" ]; then
			((WARN++)) # or WARN
			CHANGESTR="Score increased. "
		fi

		### Comparing the results and returning a status
		if [[ $(echo "$PERCENTAGE <= $crit_treshold" | bc) -eq "1" ]]; then
			((CRIT++)) # or CRIT
		elif [[ $(echo "$PERCENTAGE <= $warn_treshold" | bc) -eq "1" ]]; then
			((WARN++)) # or WARN
		fi

		### Comparing the critical cces results
		if [ ${CRIT_CCES} -gt "0" ]; then
			((CRIT++)) # or CRIT
		elif [ ${WARN_CCES} -gt "0" ]; then
			((WARN++)) # or WARN
		fi

		### State final status result
		if [ ${CRIT} -gt "0" ]; then
			STATUS=2 # or CRIT
		elif [ ${WARN} -gt "0" ]; then
			STATUS=1 # or WARN
		else
			STATUS=0 # or OK
		fi

		RESULTS="${CHANGESTR}${RESULTLINE}"

		### Report to Nagios
		${LOGGER} -t "${LOGGER_TAG}" "CheckBaseScapStatus: ${HOSTNAME} ${STATUS} ${RESULTS}"
		DATA="${DATA}
${HOSTNAME} CheckBaseScapStatus ${STATUS} ${RESULTS}"

	fi
}
